<form id="bundle-form" class="bundle-offer" aria-labelledby="bundle-title">
  <h2 id="bundle-title" class="sr-only">Choisissez votre offre</h2>

  <!-- Offre 1 -->
  <input type="radio" id="offer1" name="bundle" value="1" checked hidden
         data-variant-id="{{ section.settings.product.selected_or_first_available_variant.id }}">
  <label for="offer1" class="bundle-option" tabindex="0" data-offer="1">
    <div class="bundle-left">
      <span class="bundle-radio" aria-hidden="true"></span>
      <p class="bundle-title">Lueur de Perle — Bougie Perlée</p>
    </div>
    <div class="bundle-price">
      <span class="bundle-price-new">€35,90</span>
      <span class="bundle-price-old">€59,90</span>
    </div>
    <div class="color-lines" style="display: none;"></div>
  </label>

  <!-- Offre 2 -->
  <input type="radio" id="offer2" name="bundle" value="2" hidden
         data-variant-id="{{ section.settings.product.selected_or_first_available_variant.id }}">
  <label for="offer2" class="bundle-option" tabindex="0" data-offer="2">
    <div class="bundle-left">
      <span class="bundle-radio" aria-hidden="true"></span>
      <p class="bundle-title">Achetez-en 2 et boîte de mèches offerte</p>
    </div>
    <div class="bundle-price">
      <span class="bundle-price-new">€59,90</span>
      <span class="bundle-price-old">€75,90</span>
    </div>
    <div class="color-lines" style="display: none;"></div>
    <span class="best-offer" aria-hidden="true">Meilleure offre !</span>
  </label>

  <!-- Offre 3 -->
  <input type="radio" id="offer3" name="bundle" value="3" hidden
         data-variant-id="{{ section.settings.product.selected_or_first_available_variant.id }}">
  <label for="offer3" class="bundle-option" tabindex="0" data-offer="3">
    <div class="bundle-left">
      <span class="bundle-radio" aria-hidden="true"></span>
      <p class="bundle-title">Achetez-en 3 et 2 mèches offertes</p>
    </div>
    <div class="bundle-price">
      <span class="bundle-price-new">€79,90</span>
      <span class="bundle-price-old">€105,90</span>
    </div>
    <div class="color-lines" style="display: none;"></div>
  </label>

  <!-- Bouton -->
  <button type="submit" class="button button--primary">
    Ajouter au panier
  </button>
</form>

<style>
  .color-line {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    position: relative;
    padding-left: 90px;
  }

  .color-line::before {
    content: attr(data-label);
    position: absolute;
    left: 0;
    width: 80px;
    font-weight: 600;
  }

  .color-option {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    cursor: pointer;
  }

  .circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid transparent;
  }

  .color-option.selected .circle {
    border-color: #9C6644;
  }

  .color-blanc  { background-color: #fff; }
  .color-marron { background-color: #964B00; }
  .color-noir   { background-color: #000; }
</style>

<script>
  (() => {
    const form = document.getElementById('bundle-form');
    const radios = form.querySelectorAll('input[name="bundle"]');
    const offerTexts = {
      1: '500 g',
      2: '2 × 500 g + 1 boîte de mèches offerte',
      3: '3 × 500 g + 2 boîtes de mèches offertes'
    };

    const colors = [
      { name: 'blanc', class: 'color-blanc' },
      { name: 'marron', class: 'color-marron' },
      { name: 'noir', class: 'color-noir' }
    ];

    function makeLine(i, offer) {
      const div = document.createElement('div');
      div.className = 'color-line';
      div.dataset.index = i;
      div.dataset.label = `Bougie ${i + 1}`;
      colors.forEach(c => {
        const wrap = document.createElement('div');
        wrap.className = 'color-option';
        const circle = document.createElement('div');
        circle.className = `circle ${c.class}`;
        circle.dataset.line = i;
        circle.dataset.color = c.name;
        circle.addEventListener('click', () => {
          document.querySelectorAll(`label[data-offer="${offer}"] .circle[data-line="${i}"]`)
            .forEach(el => el.parentNode.classList.remove('selected'));
          wrap.classList.add('selected');
        });
        const name = document.createElement('div');
        name.className = 'color-name';
        name.textContent = c.name;
        wrap.append(circle, name);
        div.appendChild(wrap);
      });
      return div;
    }

    function updateColors(offer, count) {
      const container = document.querySelector(`label[data-offer="${offer}"] .color-lines`);
      container.innerHTML = '';
      for (let i = 0; i < count; i++) {
        container.appendChild(makeLine(i, offer));
      }
      container.style.display = 'block';
    }

    function hideAllColors() {
      document.querySelectorAll('.color-lines').forEach(el => {
        el.style.display = 'none';
        el.innerHTML = '';
      });
    }

    function validColors(n, offer) {
      const label = document.querySelector(`label[data-offer="${offer}"]`);
      for (let i = 0; i < n; i++) {
        if (!label.querySelector(`.color-line[data-index="${i}"] .selected`)) return false;
      }
      return true;
    }

    radios.forEach(radio => {
      radio.addEventListener('change', () => {
        const offer = parseInt(radio.value, 10);
        hideAllColors();
        updateColors(offer, offer); // 1 ligne pour offre 1, etc.
      });
    });

    form.addEventListener('submit', e => {
      e.preventDefault();
      const chosen = form.querySelector('input[name="bundle"]:checked');
      const qty = parseInt(chosen.value, 10);
      const label = document.querySelector(`label[data-offer="${qty}"]`);

      if (!validColors(qty, qty)) {
        alert("Veuillez sélectionner une couleur pour chaque bougie.");
        return;
      }

      const selectedColors = Array.from(label.querySelectorAll('.color-line')).map(line => {
        const sel = line.querySelector('.color-option.selected .color-name');
        return sel ? sel.textContent.trim() : '';
      });

      const items = [{
        id: parseInt(chosen.dataset.variantId, 10),
        quantity: qty,
        properties: {
          'Offre': offerTexts[qty] || '',
          'Couleurs des bougies': selectedColors.join(', ')
        }
      }];

      fetch('/cart/add.js', {
        method: 'POST',
        credentials: 'same-origin',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ items })
      })
      .then(r => r.ok ? r.json() : Promise.reject('error'))
      .then(() => location.href = '/cart')
      .catch(() => alert('Une erreur est survenue, réessayez !'));
    });

    document.addEventListener('DOMContentLoaded', () => {
      const selected = form.querySelector('input[name="bundle"]:checked');
      if (selected) {
        updateColors(parseInt(selected.value, 10), parseInt(selected.value, 10));
      }
    });
  })();
</script>

{% schema %}
{
  "name": "Bundle avec couleurs",
  "tag": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Produit de base"
    }
  ],
  "presets": [
    {
      "name": "Bundle avec couleurs"
    }
  ]
}
{% endschema %}
